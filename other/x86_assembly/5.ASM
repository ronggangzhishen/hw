DATA SEGMENT
    LEN DW 0
    OPINSATCK DW 0
    NUMBERFLAG DB 0
    SUFFIX DW 1024 DUP (0)
    TEN DB 10
    DISPLAYBUFFER DB 5 DUP (0)
	STANUM DB 0
DATA ENDS
STACK SEGMENT STACK
    DW 1024 DUP (?)
STACK ENDS
CODE SEGMENT
    ASSUME CS:CODE,DS:DATA,SS:STACK
START:
    MOV AX,DATA
    MOV DS,AX

    XOR DI,DI   ;SUFFIX STRING INDEX IN DI
    XOR BX,BX   ;ONE NUMBER IN BX
    XOR AX,AX
	
NEXTCHAR:
    MOV AH,01H
    INT 21H

    MOV AH,0		;INPUT CHAR IN AL
    CMP AL,0DH      ;'\n'
    JNZ NOTEND
    JMP READFINISH

NOTEND:
    INC LEN         	
    CMP AX,'('
    JNZ NOTLB
	;;;'('
	;THEN PUSH
    PUSH AX
    INC OPINSATCK
    JMP NEXTCHAR
NOTLB:
    CMP AX,')'          
    JNZ NOTRB
	;;;')' 
	;THEN POP AND ADD TO SUFFIX UNTIL '('
    CMP NUMBERFLAG,1    ;HAS NUMBER BEFORE THEN ADD NUBER TO SUFFIX
    JNZ NONUMBER0
    MOV SUFFIX[DI],BX
    ADD DI,2
    MOV NUMBERFLAG,0
    XOR BX,BX
NONUMBER0:
    POP DX
    DEC OPINSATCK
    CMP DX,'('
    JZ LBOUT
    MOV SUFFIX[DI],DX
    ADD DI,2
    JMP NONUMBER0
LBOUT:
    JMP NEXTCHAR

NOTRB:
    CMP AX,'+'
    JNZ NOTPLUS
	;;;'+'
	;IF TOP IS '(' THEN PUSH ELSE POP AND ADD TO SUFFIX
    CMP NUMBERFLAG,1    ;HAS NUMBER BEFORE THEN ADD NUBER TO SUFFIX
    JNZ NONUMBER1
    MOV SUFFIX[DI],BX
    ADD DI,2
    MOV NUMBERFLAG,0
    XOR BX,BX
NONUMBER1:
    CMP OPINSATCK,0     ;IF STACK IS EMPTY THEN JUST PUSH
    JZ STACKISEMPTY
    POP DX
    CMP DX,'('
    JNZ TOPNOTLB
    PUSH DX				;NO CHANGE
STACKISEMPTY:
    PUSH AX
    INC OPINSATCK
    JMP NEXTCHAR
TOPNOTLB:
    MOV SUFFIX[DI],DX
    PUSH AX
    ADD DI,2
    JMP NEXTCHAR

NOTPLUS:
    CMP AX,'-'
    JNZ NOTMINUS
	;;;'-'
	;IF TOP IS '(' THEN PUSH ELSE POP AND ADD TO SUFFIX
    CMP NUMBERFLAG,1    ;HAS NUMBER BEFORE THEN ADD NUBER TO SUFFIX
    JNZ NONUMBER2
    MOV SUFFIX[DI],BX
    ADD DI,2
    MOV NUMBERFLAG,0
    XOR BX,BX
NONUMBER2:
    CMP OPINSATCK,0     ;IF STACK IS EMPTY THEN JUST PUSH
    JZ STACKISEMPTY2
    POP DX
    CMP DX,'('
    JNZ TOPNOTLB2
    PUSH DX				;NO CHANGE
STACKISEMPTY2:
    PUSH AX
    INC OPINSATCK
    JMP NEXTCHAR
TOPNOTLB2:
    MOV SUFFIX[DI],DX
    PUSH AX
    ADD DI,2
    JMP NEXTCHAR

NOTMINUS:
	;;;num
	;SHIFT BX
    MOV CX,AX           ;CALCULATE NUMBER IN BX
    SUB CX,30H          ;SET NUMBERFLAG
    MOV AX,10
    MUL BX
    MOV BX,AX
    ADD BX,CX
	
    MOV NUMBERFLAG,1
    JMP NEXTCHAR

READFINISH:
    CMP NUMBERFLAG,0
    JZ POPOP
    MOV SUFFIX[DI],BX
    ADD DI,2
    MOV NUMBERFLAG,0
POPOP:                  ;IF STACK IS NOT EMPTY THEN POP AND ADD TO SUFFIX
    CMP OPINSATCK,0
    JZ SUFFIXREADY
    POP DX
    DEC OPINSATCK
    MOV SUFFIX[DI],DX
    ADD DI,2
    JMP READFINISH

SUFFIXREADY:
    XOR SI,SI           
    XOR BX,BX
    XOR AX,AX
AGAIN:
    MOV CX,SUFFIX[SI]
    CMP CX,'+'
    JNZ NOTPLUSOP
	;'+' POP TWO ADD PUSH
    POP AX    
	DEC STANUM
    POP BX
	DEC STANUM
    ADD BX,AX
    PUSH BX
	INC STANUM
    JMP NEXTOP
NOTPLUSOP:
    CMP CX,'-'
    JNZ NOTMINUSOP
	;'-' 
	;POP ONE OR TWO SUB PUSH
    POP AX   
	DEC STANUM
	CMP STANUM,0
	JZ BX0
    POP BX
	DEC STANUM
	JMP SUB2
BX0:
	MOV BX,0
SUB2:
    SUB BX,AX
    PUSH BX
	INC STANUM
    JMP NEXTOP
NOTMINUSOP:
    PUSH CX             ;PUSH NUMBER
	INC STANUM
NEXTOP:
    ADD SI,2
    CMP SI,DI
	;END
    JZ DISPLAY
    JMP AGAIN

DISPLAY:
	MOV AH,02H
	MOV DL,0DH
	INT 21H
	MOV DL,0AH
	INT 21H
    POP BX          ;ANS IN BX
    MOV BYTE PTR DISPLAYBUFFER,30H      ;0
    MOV BYTE PTR DISPLAYBUFFER[1],30H
    MOV BYTE PTR DISPLAYBUFFER[2],30H
    MOV BYTE PTR DISPLAYBUFFER[3],30H
    MOV BYTE PTR DISPLAYBUFFER[4],30H
    MOV DI,4
    CMP BX,0
    JGE NEXT
    MOV DL,'-'      ;IF NEG THEN DISPLAY '-'
    MOV AH,02H
    INT 21H
    NEG BX
NEXT:
    MOV AX,BX       ;ANS IN AX
NEXTROUND:
    CMP AX,9                                
    JLE FINISH
    DIV BYTE PTR TEN
    ADD BYTE PTR DISPLAYBUFFER[DI],AH	;PLACE FROM LOW TO HIGH
    MOV AH,00H
    DEC DI
    JMP NEXTROUND

FINISH:
    ADD DISPLAYBUFFER[DI],AL
    XOR SI,SI
SKIPZERO:
    MOV DL,DISPLAYBUFFER[SI]
    INC SI
	CMP SI,5
    JZ SHOWDIGIT    ;MUST HAVE ONE BIT
    CMP DL,30H
    JZ SKIPZERO
SHOWDIGIT:
    MOV AH,02H
    INT 21H
    MOV DL,DISPLAYBUFFER[SI]
    INC SI
    CMP SI,6
    JZ EXIT
    JMP SHOWDIGIT

EXIT:
    MOV AX,4C00H
    INT 21H
CODE ENDS
END START