_start:
   
addi	    $t0, $0, 1			# $t0 = $0 + 1         $t0=1    根据寄存器的数值判断指令是否正确
   
addi	    $t1, $0, 2			# $t1 = $0 + 2         $t1=2 
   
add		$t2, $t1, $t0		# $t2 = $t1 + $t0      $t2=3  
   
sub		$t3, $t2, $t1		# $t3 = $t2 - $t1      $t3=1
   
   
or		$t4, $t1, $t2		# $t4 = $t1 | $t2      $t4=3
   
and      $t5, $t1, $t2       # $t5 = $t1 & $t2      $t5=2
   
xor      $t6, $t1, $t2       # $t6 = $t1 ^ $t2      $t6=1
   
nor      $t7, $t1, $t2       # $t7 = $t1 nor $t2    $t7=0xfffffffc

   
slt      $s1, $t1, $t2       # $s1 = $t1 < $t2 ?  1 : 0    $s1=1
   
slti     $s2, $t1, 0         # $s1 = $t1 < 0?  1 : 0       $s1=0

   
andi     $s3, $t2, 5         # $s3 = $t2 & 5        $s3=1
   
ori      $s4, $t2, 5         # $s4 = $t2 | 5        $s4=7
   
xori     $s5, $t2, 5         # $s5 = $t2 ^ 5        $s5=6

  

sw		$t1, 256($0)		# [256 + $0] = $t1  根据存储地址256中是否有数据判断指令是否正确
   
lw		$s6, 256($0)		# $s6 = [256 + $0]  根据寄存器s6中是否有数据判断指令是否正确
  
 

   
beq		$t0, $t1, label1         #  若指令正确执行，s7寄存器为1，否则跳转没有数值
   
addi	    $s7, $0, 1          # $s7 = 1  

label1:   beq		$t5, $t1, label2            #  若指令正确执行，s7寄存器为1 ，错误为2    
   
addi	    $s7, $0, 2          # $s7 = 2

label2:     
bne		$t0, $t1, label3         #  若指令正确执行，s7寄存器为1 ，错误为3  
   
addi	    $s7, $0, 3          # $s7 = 3

 l
abel3:  
bne		$t5, $t1, label4            #  若指令正确执行，s7寄存器为4 ，错误为其他 
   
addi	    $s7, $0, 4          # $s7 = 4
 
label4:  j		label5				    #  若指令正确执行，s7寄存器为4 ，错误为其他 
   
addi	    $s7, $0,  5			# $s7 = 5       
 
label5:  addi	    $0, $0, 1			# $0 = $0 + 1    but     $0=0
 
